import org.gradle.api.artifacts.maven.MavenDeployment

/*
* Copyright 2012 the original author or authors.
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile gradleApi()
    compile 'org.cloudfoundry:cloudfoundry-client-lib:1.1.0'
    compile 'org.codehaus.groovy:groovy:2.3.6'
    testCompile 'junit:junit:4.8.2'
}

group = 'org.cloudfoundry'
version = '1.1.1.BUILD-SNAPSHOT'

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

if (project.hasProperty('performRelease')) {
    signing {
        sign configurations.archives
    }
}

def credentials = [ : ]
if (project.hasProperty('deployUser') && project.hasProperty('deployPassword')) {
    credentials << [userName: deployUser, password: deployPassword]
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(id:'sonatype-nexus-staging',url: uri('https://oss.sonatype.org/service/local/staging/deploy/maven2'), authentication: credentials)
            snapshotRepository(id:'sonatype-nexus-snapshots', url: uri('https://oss.sonatype.org/content/repositories/snapshots'), authentication: credentials)
            pom.project {
                name 'Cloud Foundry Gradle Plugin'
                parent {
                    groupId 'org.sonatype.oss'
                    artifactId 'oss-parent'
                    version '7'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                scm(
                    url:'git@github.com:cloudfoundry/cf-java-client.git',
                    connection:'scm:git:git@github.com:cloudfoundry/cf-java-client.git',
                    developerConnection:'scm:git:git@github.com:cloudfoundry/cf-java-client.git')
                developers {
                    developer(id:'melix', name:'CÃ©dric Champeau')
                    developer(id:'scottfrederick', name:'Scott Frederick')
                }
                description('A Gradle plugin that makes it easy to deploy Gradle-based applications to Cloud Foundry instances.')
                url('https://github.com/cloudfoundry/cf-java-client/cloudfoundry-gradle-plugin')
            }

            // courtesy of http://jedicoder.blogspot.com/2011/11/automated-gradle-project-deployment-to.html
            pom.withXml { XmlProvider xmlProvider ->
                def xml = xmlProvider.asString()
                def pomXml = new XmlParser().parse(new ByteArrayInputStream(xml.toString().bytes))

                pomXml.version[0] + { packaging('jar') }

                def newXml = new StringWriter()
                def printer = new XmlNodePrinter(new PrintWriter(newXml))
                printer.preserveWhitespace = true
                printer.print(pomXml)
                xml.setLength(0)
                xml.append(newXml.toString())
            }
        }
    }
}
